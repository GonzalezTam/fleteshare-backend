import mongoose from 'mongoose';
import readline from 'readline';
import { CONFIG } from '../src/config/env.config';

// Crear interfaz para input del usuario
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Funci√≥n para pedir confirmaci√≥n
const askConfirmation = (question: string): Promise<boolean> => {
  return new Promise(resolve => {
    rl.question(`${question} (y/N): `, answer => {
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes' || answer === '1');
    });
  });
};

const wipe = async () => {
  try {
    // üõ°Ô∏è Protecci√≥n: Solo funciona en desarrollo
    if (CONFIG.isProduction || CONFIG.nodeEnv === 'production') {
      console.log('üåç Entorno actual:', CONFIG.nodeEnv);
      console.log('üö® Este script solo funciona en DESARROLLO');
      process.exit(1);
    }

    const dbName = 'fleteshare_local';
    console.log(`üí• Limpieza total r√°pida de ${dbName}...`);
    console.log('‚ö†Ô∏è  Eliminando TODA la base de datos de desarrollo...');

    // Conectar
    await mongoose.connect(CONFIG.mongodbUri!, {
      serverSelectionTimeoutMS: 5000,
    });

    // Mostrar estad√≠sticas r√°pidas antes de eliminar
    const collections = (await mongoose.connection.db?.listCollections().toArray()) || [];

    if (collections.length === 0) {
      console.log('‚ú® Base de datos ya est√° completamente vac√≠a');
      rl.close();
      return;
    }

    console.log(`üóëÔ∏è  Encontradas ${collections.length} colecciones:`);
    collections.forEach(col => console.log(`   - ${col.name}`));

    // ‚ú® VALIDACI√ìN - Pedir confirmaci√≥n antes de proceder
    console.log('\n‚ö†Ô∏è  Esta operaci√≥n eliminar√° TODOS los datos de desarrollo');
    const confirmed = await askConfirmation('¬øEst√°s seguro de que quieres continuar?');

    if (!confirmed) {
      console.log('‚ùå Operaci√≥n cancelada por el usuario');
      rl.close();
      return;
    }

    rl.close(); // Cerrar interfaz despu√©s de la confirmaci√≥n

    console.log('\nüöÄ Procediendo con la limpieza...');

    // Eliminar toda la base de datos de una vez
    try {
      await mongoose.connection.db?.dropDatabase();
      console.log('‚úÖ Base de datos eliminada completamente');
    } catch (error) {
      // M√©todo de respaldo: eliminar colecci√≥n por colecci√≥n
      console.log('‚ö†Ô∏è  Usando m√©todo alternativo...');
      for (const collection of collections) {
        try {
          await mongoose.connection.db?.collection(collection.name).drop();
          console.log(`   ‚úÖ ${collection.name} eliminada`);
        } catch (collectionError) {
          console.log(`   ‚ùå Error eliminando ${collection.name}`);
        }
      }
    }

    // Verificar resultado
    const remainingCollections = (await mongoose.connection.db?.listCollections().toArray()) || [];

    console.log('');
    console.log('üíÄ ¬°LIMPIEZA TOTAL COMPLETADA!');

    if (remainingCollections.length === 0) {
      console.log('‚úÖ Base de datos completamente vac√≠a - Como nueva instalaci√≥n');
      console.log('üîÑ Puedes ejecutar npm run db:simpleSeed para crear datos de prueba');
    } else {
      console.log(`‚ö†Ô∏è  ${remainingCollections.length} colecciones no pudieron eliminarse`);
    }
  } catch (error) {
    console.error('‚ùå Error durante la limpieza total:', error);
    rl.close(); // Asegurar que se cierre la interfaz en caso de error
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Conexi√≥n cerrada');
    process.exit(0);
  }
};

if (require.main === module) {
  wipe();
}
